name: Build CUDA Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of llama-cpp-binaries to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Override configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of llama-cpp-binaries to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    env:
      CONFIGIN: ${{ inputs.config }}
      EXCLUDEIN: ${{ inputs.exclude }}

    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = @('windows-2019')
              'pyver' = @("3.11")
              'cuda' = @("12.4.1")
              'avxver' = @("AVX512")
          }

          if ($env:CONFIGIN -ne 'Default') {$env:CONFIGIN.split(';').foreach({$matrix[$_.split(':')[0]] = $_.split(':')[1].split(',')})}

          if ($env:EXCLUDEIN -ne 'None') {
              $exclusions = @()
              $exclusions += $env:EXCLUDEIN.split(';').replace(':','=').replace(',',"`n") | ConvertFrom-StringData
              $matrix['exclude'] = $exclusions
          }

          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT

  build_wheels:
    name: Build Wheel ${{ matrix.os }} ${{ matrix.pyver }} ${{ matrix.cuda }} ${{ matrix.avxver }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}
      AVXVER: ${{ matrix.avxver }}
      PCKGVER: ${{ inputs.version }}

    steps:
      - name: Add MSBuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '[16.11,16.12)'

      - uses: actions/checkout@v4
        with:
          repository: 'oobabooga/llama-cpp-binaries'
          ref: ${{ inputs.version }}
          submodules: 'recursive'

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v3.1.0
        with:
          activate-environment: "TGW"
          python-version: ${{ matrix.pyver }}
          miniforge-version: latest
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: VS Integration Cache
        id: vs-integration-cache
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ./MSBuildExtensions
          key: cuda-${{ matrix.cuda }}-vs-integration

      - name: Get Visual Studio Integration
        if: runner.os == 'Windows' && steps.vs-integration-cache.outputs.cache-hit != 'true'
        run: |
          if ($env:CUDAVER -eq '12.1.1') {$x = '12.1.0'} else {$x = $env:CUDAVER}
          $links = (Invoke-RestMethod 'https://raw.githubusercontent.com/Jimver/cuda-toolkit/95b5a29a2823ef87666dcd45ec236fc4f82498d0/src/links/windows-links.ts').Trim().split().where({$_ -ne ''})
          for ($i=$q=0;$i -lt $links.count -and $q -lt 2;$i++) {if ($links[$i] -eq "'$x',") {$q++}}
          Invoke-RestMethod $links[$i].Trim("'") -OutFile 'cudainstaller.zip'
          & 'C:\Program Files\7-Zip\7z.exe' e cudainstaller.zip -oMSBuildExtensions -r *\MSBuildExtensions\* > $null
          Remove-Item 'cudainstaller.zip'

      - name: Install Visual Studio Integration
        if: runner.os == 'Windows'
        run: |
          $y = (gi '.\MSBuildExtensions').fullname + '\*'
          (gi 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\*\BuildCustomizations').fullname.foreach({cp $y $_})
          $cupath = 'CUDA_PATH_V' + $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','_')
          echo "$cupath=$env:CONDA_PREFIX" >> $env:GITHUB_ENV

      - name: Install Dependencies
        run: |
          $cudaVersion = $env:CUDAVER
          $cudaChannels = ''
          $cudaNum = [int]$cudaVersion.substring($cudaVersion.LastIndexOf('.')+1)
          while ($cudaNum -ge 0) { $cudaChannels += '-c nvidia/label/cuda-' + $cudaVersion.Remove($cudaVersion.LastIndexOf('.')+1) + $cudaNum + ' '; $cudaNum-- }
          mamba install -y 'cuda' $cudaChannels.TrimEnd().Split()
          if (!(mamba list cuda)[-1].contains('cuda')) {sleep -s 10; mamba install -y 'cuda' $cudaChannels.TrimEnd().Split()}
          if (!(mamba list cuda)[-1].contains('cuda')) {throw 'CUDA Toolkit failed to install!'}

          python -m pip install build

      - name: Build Wheel
        run: |
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          $cudaVersion = $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','')
          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX
          if ($IsLinux) {$env:LD_LIBRARY_PATH = $env:CONDA_PREFIX + '/lib:' + $env:LD_LIBRARY_PATH}
          $env:VERBOSE = '1'
          $env:CMAKE_ARGS = '-DGGML_CUDA=on -DCMAKE_CUDA_ARCHITECTURES=all'
          $env:CMAKE_ARGS = "-DGGML_NATIVE=off $env:CMAKE_ARGS"
          if ($env:AVXVER -eq 'AVX') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'; $cputag = 'avx'}
          if ($env:AVXVER -eq 'AVX512') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX512=on -DGGML_AVX512_VBMI=on -DGGML_AVX512_VNNI=on'; $cputag = 'avx512'}
          if ($env:AVXVER -eq 'basic') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX=off -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'; $cputag = 'basic'}
          $env:CMAKE_ARGS = "-DCMAKE_PREFIX_PATH=$env:CONDA_PREFIX $env:CMAKE_ARGS"
          $env:LLAMA_CPP_BUILD_JOBS = "2"

          # Copy CUDA libraries based on platform
          $binDir = "llama_cpp_binaries/bin"

          if ($IsLinux) {
              # Linux libraries to copy
              if ($env:CUDAVER -eq "12.4.1") {
                  $libsToFind = @("libcudart.so.12", "libcublas.so.12", "libcublasLt.so.12")
              } elseif ($env:CUDAVER -eq "11.7.1") {
                  $libsToFind = @("libcudart.so.11.0", "libcublas.so.11", "libcublasLt.so.11")
              } else {
                  Write-Warning "Unknown CUDA version: $($env:CUDAVER)"
                  return
              }

              # Search recursively in CONDA_PREFIX for the libraries
              foreach ($lib in $libsToFind) {
                  $foundFiles = Get-ChildItem -Path $env:CONDA_PREFIX -Filter $lib -Recurse -File
                  if ($foundFiles.Count -gt 0) {
                      # For Linux, use cp with -L flag to follow symlinks
                      $sourcePath = $foundFiles[0].FullName
                      $destPath = "$binDir/$lib"
                      bash -c "cp -L '$sourcePath' '$destPath'"
                      Write-Host "Copied $sourcePath to $destPath (with symlink resolution)"
                  } else {
                      Write-Warning "Could not find $lib in $env:CONDA_PREFIX"
                  }
              }
          } else {
              # Windows libraries to copy
              if ($env:CUDAVER -eq "12.4.1") {
                  $libsToFind = @("cublas64_12.dll", "cudart64_12.dll", "cublasLt64_12.dll")
              } elseif ($env:CUDAVER -eq "11.7.1") {
                  $libsToFind = @("cublas64_11.dll", "cudart64_110.dll", "cublasLt64_11.dll")
              } else {
                  Write-Warning "Unknown CUDA version: $($env:CUDAVER)"
                  return
              }

              # Search recursively in CONDA_PREFIX for the libraries
              foreach ($lib in $libsToFind) {
                  $foundFiles = Get-ChildItem -Path $env:CONDA_PREFIX -Filter $lib -Recurse -File
                  if ($foundFiles.Count -gt 0) {
                      # Copy the first match to the bin directory
                      Copy-Item -Path $foundFiles[0].FullName -Destination "$binDir/$lib"
                      Write-Host "Copied $($foundFiles[0].FullName) to $binDir/$lib"
                  } else {
                      Write-Warning "Could not find $lib in $env:CONDA_PREFIX"
                  }
              }
          }

          $buildtag = "+cu$cudaVersion$cputag"
          python -m build --wheel -C--build-option=egg_info "-C--build-option=--tag-build=$buildtag"

      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/*.whl
          tag: ${{ inputs.version }}
          file_glob: true
          make_latest: false
          overwrite: true

      - uses: actions/upload-artifact@v4
        if: steps.upload-release.outcome == 'failure'
        with:
          name: textgen-webui-wheels
          path: ./dist/*.whl
